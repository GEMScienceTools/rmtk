% ------------------- Chiara Casotto - 10 February 2015 -------------------
%
% This script performs a vulnerability analysis starting from fragility
% curves and damage-to-loss function. This is a test for the RMTK
% -------------------------------------------------------------------------

close all; clc; clear all
addpath('/Users/chiaracasotto/Documents/GEM/RMTK/DimitriosFiles/');
addpath('/Users/chiaracasotto/Documents/GEM/RMTK/DimitriosFiles/spo2ida_allT/');

%% INPUTS
% building parameters
Gamma = 1.292;
T = 1.612;
MC = 25;
g = 9.81;

% Inputs from pushover
SPO	=  [0.104435862	0.233993594	0.897709787	0.940278828	2093.9	2093.9	91.43446494]; %d and F
dry = SPO(1);
du = SPO(4);
mc = 2.24;
a = 0.00;
ac = 0.15;
r = 0.043;
mf = 9;

% Inputs for Limit States
dlim	= [0.002, 0.005, 0.01, 0.02, 0.04, 0.06, 0.08;...
    0.046144456, 0.107312842, 0.212491246, 0.473466774, 0.724976013, 0.940278828, 0.940278828];
bUthd	= [0 0.25];
vecs = csvread('../fragility_process/inputs/EDPvec-RDvec.csv');
EDPvec{1} = vecs(:,1);
RDvec{1} = vecs(:,2);
EDPvec{2} = [];
RDvec{2} = [];

%% ANALYSIS
iml = linspace(0.001,3.5,25);
counter = 1;
for edp = 1:length(EDPvec)
    for disp = 1:length(bUthd)
        EDPsample = zeros(1,MC);
        for i = 1:length(dlim)
            if bUthd(disp) == 0
                [SaR50,bRSa,SaT50,bTSa]=SPO2IDAfragility(dry,dlim(edp,i),...
                    bUthd(disp),mc,a,ac,r,mf,T,Gamma,EDPvec{edp},RDvec{edp},g,MC);     
                Sa50 = ones(1,MC)*SaT50;
                bSa = ones(1,MC)*bTSa;     
            else
                for j=1:MC
                    EDPsample(i+1,j) = lognrnd(log(dlim(edp,i)),bUthd(disp),1);
                    while EDPsample(i+1,j)<EDPsample(i,j)
                        EDPsample(i+1,j) = lognrnd(log(dlim(edp,i)),bUthd(disp),1);
                    end
                    [SaR50,bRSa,SaT50,bTSa]=SPO2IDAfragility(dry,EDPsample(i+1,j),...
                        0.,mc,a,ac,r,mf,T,Gamma,EDPvec{edp},RDvec{edp},g,MC);
                    Sa50(j) = SaT50;
                    bSa(j) = bTSa;
                end
            end
            SaT{i} = Sa50;
            b{i} = bSa;
            clear Sa50 bSa
        end
        for samp=1:MC
           LR(samp,:) = damage_to_loss( SaT, b, samp, iml  );
        end
        LR50s(counter,:) = mean(LR); % Define Vulnerability curve for each building
        bLRs(counter,:) = std(LR);
        counter = counter+1;
    end
end

%% RECORDER
xlswrite(horzcat('./results/SPO2IDA_vulnerability_matlab.xls'), [iml;LR50s; bLRs])