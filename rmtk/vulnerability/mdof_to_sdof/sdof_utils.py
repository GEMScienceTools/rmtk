# -*- coding: utf-8 -*-
"""
Created on Mon Sep  7 10:32:08 2015

@author: chiaracasotto
"""
from rmtk.vulnerability.common import utils
import numpy as np
import csv

def idealise_sdof(idealised_type, sdof_capacity_curves):
    idealised_capacity = utils.idealisation(idealised_type, sdof_capacity_curves)
    
    # We are adding yielding spectral displacement and acceleration to the curves
    sdof_capacity_curves['Sdy']= []
    sdof_capacity_curves['Say']= []
    
    # We are creating a idealised capacity curves with same properties but only 5 relevant points
    sdof_idealised_capacity = {}
    sdof_idealised_capacity['type'] = 'Sd-Sa'
    sdof_idealised_capacity['idealised'] = 'TRUE'
    sdof_idealised_capacity['periods'] = sdof_capacity_curves['periods']
    sdof_idealised_capacity['heights'] = sdof_capacity_curves['heights']
    sdof_idealised_capacity['gamma'] = sdof_capacity_curves['gamma']
    sdof_idealised_capacity['Say'] = [];
    sdof_idealised_capacity['Sdy'] = [];
    sdof_idealised_capacity['Sa'] = [];
    sdof_idealised_capacity['Sd'] = [];
    
    for icc in range(0,len(sdof_capacity_curves['periods'])):

        sdof_capacity_curves['Sdy'].append(idealised_capacity[icc][0])
        sdof_idealised_capacity['Sdy'].append(idealised_capacity[icc][0])
        if idealised_type == 'bilinear':
            sdof_idealised_capacity['Sd'].append(np.concatenate(([0.0],idealised_capacity[icc][0:2],np.repeat(idealised_capacity[icc][1],2)),axis = 0))
            sdof_idealised_capacity['Sa'].append(np.concatenate(([0.0],np.repeat(idealised_capacity[icc][2],4)),axis = 0))
            sdof_idealised_capacity['Say'].append(idealised_capacity[icc][2])            
            sdof_capacity_curves['Say'].append(idealised_capacity[icc][2])
        else:
            sdof_idealised_capacity['Sd'].append(np.concatenate(([0.0],idealised_capacity[icc][0:4]),axis = 0))
            sdof_idealised_capacity['Sa'].append(np.concatenate(([0.0],idealised_capacity[icc][4:6],np.repeat(idealised_capacity[icc][6],2)),axis = 0))
            sdof_idealised_capacity['Say'].append(idealised_capacity[icc][4])
            sdof_capacity_curves['Say'].append(idealised_capacity[icc][4])
        
    return [sdof_capacity_curves, sdof_idealised_capacity]

def from_ISD_to_Sd(capacity_curves, icc):
    #convert displacement to inter-storey-drift
        
    if capacity_curves['type'] == 'Vb-dfloor':
        no_storeys = capacity_curves['no_storeys'][icc]
        H_tot = capacity_curves['ground_heights'][icc] + capacity_curves['regular_heights'][icc]*(no_storeys-1)
        disp = capacity_curves['dfloor'][icc]
        floor_ISD = np.zeros((len(disp),len(disp[0])))
        floor_ISD[0,:] = np.array(disp[0])/capacity_curves['ground_heights'][icc]
        for i in range(1,no_storeys):
            #convert displacement to inter-storey-drift
            floor_ISD[i,:] = (np.array(disp[i])-np.array(disp[i-1]))/capacity_curves['regular_heights'][icc]    
            
        ISDvec = np.max(floor_ISD, axis = 0)
        Sdvec = np.array(capacity_curves['droof'][icc])/capacity_curves['gamma'][icc]
        
    elif capacity_curves['type'] == 'Vb-droof':
        # This is a simple assumption on the relationship between roof displacement and drift
        print "A linear relationship is assumed between roof displacement and drift"
        no_storeys = capacity_curves['no_storeys'][icc]
        H_tot = capacity_curves['ground_heights'][icc] + capacity_curves['regular_heights'][icc]*(no_storeys-1)
        RDvec = np.array(capacity_curves['droof'][icc])
        ISDvec = np.array(RDvec)/H_tot/capacity_curves['gamma'][icc]
        Sdvec = np.array(RDvec)/capacity_curves['gamma'][icc]
        
    elif capacity_curves['type'] == 'Sd-Sa':
        # This is a simple assumption on the relationship between roof displacement and drift
        print "A linear relationship is assumed between roof displacement and drift"
        assert(capacity_curves['heights'] != []), 'If you want to use inter-storey drift damage model you should provide building height in capacity curve input file'
        RDvec = np.array(capacity_curves['Sd'][icc])*capacity_curves['gamma'][icc]
        ISDvec = np.array(RDvec)/capacity_curves['heights'][icc]
        Sdvec = np.array(capacity_curves['Sd'][icc])
    
    return [ISDvec, Sdvec]

def save_deformed_shape(ISDvec, Sdvec, filename):
    
    no_capacity_curves = len(ISDvec)
    with open(filename,'w') as d:
        csv_writer = csv.writer(d)
        for icc in range(no_capacity_curves):
            csv_writer.writerow(['ISD']+[row for row in ISDvec[icc]])
            csv_writer.writerow(['Roof Disp [m]']+[row for row in Sdvec[icc]])
