# -*- coding: utf-8 -*-
"""
Created on Mon Sep  7 10:32:08 2015

@author: chiaracasotto
"""
from rmtk.vulnerability.common import utils
import numpy as np

def idealise_sdof(idealised_type, sdof_capacity_curves):
    idealised_capacity = utils.idealisation(idealised_type, sdof_capacity_curves)
    
    sdof_capacity_curves['Sdy']= []
    sdof_capacity_curves['Say']= []
    
    for icc in range(0,len(sdof_capacity_curves['periods'])):
        
        sdof_capacity_curves['Sdy'].append(idealised_capacity[icc][0])
        if idealised_type == 'bilinear':
            sdof_capacity_curves['Say'].append(idealised_capacity[icc][2])
        else:
            sdof_capacity_curves['Say'].append(idealised_capacity[icc][4])
                
    return sdof_capacity_curves

def sdof_damage_model(capacity_curves, damage_model):
    
    num_bldgs = len(capacity_curves['periods'])
    type_criteria = 'spectral displacement'
    median = []
    dispersion = []
    
    if damage_model['type_criteria'] != 'interstorey drift':
        print 'ERROR: this function works only with interstorey drift damage model'
        return
    else:
        for icc in xrange(num_bldgs):
            if capacity_curves['type'] == 'Vb-droof':
                bldg_height = capacity_curves['ground_heights'][icc]+capacity_curves['regular_heights'][icc]*(capacity_curves['no_storeys'][icc]-1)
                gamma = capacity_curves['gamma'][icc]
                median.append(np.array(damage_model['median'][icc])*bldg_height/gamma)
                dispersion.append(np.array(damage_model['dispersion'][icc])*bldg_height/gamma)
            #elif capacity_curves['type'] = 'Vb-droof':
            # find droof corresponding to damage_state ISD

        sdof_damage_model = {'type_criteria': None, 'damage_states': None,
        'type_damage_state': None, 'distribution': None, 'median': None, 'dispersion': None}
        sdof_damage_model['type_criteria'] = type_criteria
        sdof_damage_model['damage_states'] = damage_model['damage_states']
        sdof_damage_model['distribution'] = damage_model['distribution']
        sdof_damage_model['median'] = median
        sdof_damage_model['dispersion'] = dispersion

        return sdof_damage_model

def save_Sd_damage_model(damage_model, filename):
    
    output = open(filename, 'w')
    output.write('Type,spectral displacement\n')
    no_ds = len(damage_model['damage_states'])
    no_bldg = len(damage_model['median'])
    output.write('Damage States,distribution,median,dispersion\n')
    for ds in range(no_ds):
        output.write(damage_model['damage_states'][ds] + ',')
        statistics = 'normal'
        for icc in range(no_bldg):
            statistics = statistics + ',' + str(damage_model['median'][icc][ds]) + ',' + str(damage_model['dispersion'][icc][ds])
        output.write(statistics)
        output.write('\n')

    output.close()