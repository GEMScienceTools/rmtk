# -*- coding: utf-8 -*-
"""
Created on Mon Sep  7 10:32:08 2015

@author: chiaracasotto
"""
from rmtk.vulnerability.common import utils
import numpy as np

def idealise_sdof(idealised_type, sdof_capacity_curves):
    idealised_capacity = utils.idealisation(idealised_type, sdof_capacity_curves)
    
    # We are adding yielding spectral displacement and acceleration to the curves
    sdof_capacity_curves['Sdy']= []
    sdof_capacity_curves['Say']= []
    
    # We are creating a idealised capacity curves with same properties but only 5 relevant points
    sdof_idealised_capacity = {}
    sdof_idealised_capacity['type'] = 'Sd-Sa'
    sdof_idealised_capacity['idealised'] = 'TRUE'
    sdof_idealised_capacity['periods'] = sdof_capacity_curves['periods']
    sdof_idealised_capacity['heights'] = sdof_capacity_curves['heights']
    sdof_idealised_capacity['gamma'] = sdof_capacity_curves['gamma']
    sdof_idealised_capacity['Say'] = [];
    sdof_idealised_capacity['Sdy'] = [];
    sdof_idealised_capacity['Sa'] = [];
    sdof_idealised_capacity['Sd'] = [];
    
    for icc in range(0,len(sdof_capacity_curves['periods'])):
        
        sdof_capacity_curves['Sdy'].append(idealised_capacity[icc][0])
        sdof_idealised_capacity['Sdy'].append(idealised_capacity[icc][0])
        if idealised_type == 'bilinear':
            sdof_idealised_capacity['Sd'].append(np.concatenate(([0.0],idealised_capacity[icc][0:2],np.repeat(idealised_capacity[icc][1],2)),axis = 0))
            sdof_idealised_capacity['Sa'].append(np.concatenate(([0.0],np.repeat(idealised_capacity[icc][2],4)),axis = 0))
            sdof_idealised_capacity['Say'].append(idealised_capacity[icc][2])            
            sdof_capacity_curves['Say'].append(idealised_capacity[icc][2])
        else:
            sdof_idealised_capacity['Sd'].append(np.concatenate(([0.0],idealised_capacity[icc][0:4]),axis = 0))
            sdof_idealised_capacity['Sa'].append(np.concatenate(([0.0],[idealised_capacity[icc][4]],idealised_capacity[icc][4:]),axis = 0))
            sdof_idealised_capacity['Say'].append(idealised_capacity[icc][4])
            sdof_capacity_curves['Say'].append(idealised_capacity[icc][4])
        
    return [sdof_capacity_curves, sdof_idealised_capacity]

def save_Sd_damage_model(damage_model, filename):
    
    output = open(filename, 'w')
    output.write('Type,spectral displacement\n')
    no_ds = len(damage_model['damage_states'])
    no_bldg = len(damage_model['median'])
    output.write('Damage States,distribution,median,dispersion\n')
    for ds in range(no_ds):
        output.write(damage_model['damage_states'][ds] + ',')
        statistics = 'normal'
        for icc in range(no_bldg):
            statistics = statistics + ',' + str(damage_model['median'][icc][ds]) + ',' + str(damage_model['dispersion'][icc][ds])
        output.write(statistics)
        output.write('\n')

    output.close()

def from_drift_to_disp(limits,capacity_curves, icc):
    disp = capacity_curves['dfloor'][icc]
    noStorey = capacity_curves['no_storeys'][icc]
    droof = capacity_curves['droof'][icc]
    median_roof = []
    # Limits state definition
    # Assign damage state to each analysis
    for ls in range(0,len(limits)):
        floor_ISD = np.array(disp[0])/capacity_curves['ground_heights'][icc]
        b = np.nonzero(floor_ISD>limits[ls])
        if len(b[0]) == 0: 
            find = len(floor_ISD)-1
        else:
            find = b[0][0]
        I = [find]
        for i in range(1,noStorey):
            floor_ISD = (np.array(disp[i])-np.array(disp[i-1]))/capacity_curves['regular_heights'][icc] #convert displacement to inter-storey-drift
            b = np.nonzero(floor_ISD>limits[ls])
            if len(b[0]) == 0: 
                find = len(floor_ISD)-1
            else:
                find = b[0][0]
            I.append(find)
        
        median_roof.append(droof[min(I)])

    return median_roof