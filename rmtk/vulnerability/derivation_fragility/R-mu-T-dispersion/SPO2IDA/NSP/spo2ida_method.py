# -*- coding: utf-8 -*-
"""
Created on Thu May 29 11:29:32 2014

@author: chiaracasotto
"""
import numpy as np
import scipy.stats as stat
import os
pi = 3.141592653589793

def spo2ida(idacm, idacr, mf, T, Gamma, g, EDPlim, dcroof, EDPvec, RDvec, SPO, bUthd, MC):

    # Relationship between EDP and RD defined by pushover analysis, if not they are linear
    if len(EDPvec)>2:    
        [EDPvec,indy]=np.unique(EDPvec,return_index=True);
        RDvec=RDvec[indy];
    drlim=np.interp(EDPlim,EDPvec,RDvec)

    dry, du = SPO[0], SPO[-4]
    drlim = np.array(drlim) 
    bUthd = np.array(bUthd)
    
    if bUthd.any>0 and MC==0:
        print 'error: MC must be different from zero'
        os._exit(1)
    tdrlim = drlim
    mlim = np.divide(drlim,dry);
    
    # limiting ductility 
    tdrlim[drlim>du] = du  
    tmlim = np.divide(tdrlim,dry) # tmlim is limited by du
    print "mu(LS) = ", mlim
    
    # Assume lognormal and do some Monte Carlo
    SaT50, bTSa = np.zeros_like(mlim),np.zeros_like(mlim)
    Say = np.power(2*pi,2)*dry/(g*Gamma*np.power(T,2))
    
    if bUthd.all() == float(0):
        for i in range(0,len(tmlim)):
            # find where in ida curves ductility (i) is reached and get corresponding R for all the percentile (j)
            Rcap = [np.interp(tmlim[i],idacm[j],idacr[j]) for j in range(0,len(idacm))]
            SaT50[i] = np.array(Rcap[1])*Say
            bTSa[i] = 0.5*(np.log(np.array(Rcap[0]))-np.log(np.array(Rcap[2])))
    else:
        st = (1./(2.*MC))
        en = (1.-(1./(2.*MC)))
        xp = np.linspace(st,en,MC)
        Sai, Sa = [],[]         
        for i in range(0,len(mlim)):
            Sai.append([])
            Sa.append(np.array([]))
            if bUthd[i]>0:
                EDPsample = stat.lognorm.ppf(xp,bUthd[i],loc=0,scale=EDPlim[i])
                musample = np.interp(EDPsample,EDPvec,RDvec)/dry;
                musample[musample>mf]=mf
                RcapMC = [np.interp(musample,idacm[j],idacr[j]) for j in range(0,len(idacm))]
                # RcapMC[j] with j =0,1,2 are the 3 percentiles corresponding to musample ductilities          
                allSa50 = [ele*Say for ele in RcapMC[1]]
                allbSa50 = (np.log(RcapMC[0])-np.log(RcapMC[2]))/2
                for j in range(0,MC):
                    if allbSa50[j]>0:
                        realisation = stat.lognorm.ppf(xp,allbSa50[j],loc=0,scale=allSa50[j])
                    else:
                        realisation = np.repeat(allSa50[j],MC)
                    Sai[i].append(realisation)
                    
        for i in range(0,len(mlim)):
            if len(Sai[i])>0:
                for j in range(1,len(Sai[i])):
                    Sai[i][j] = np.concatenate((Sai[i][j-1],Sai[i][j]))
                Sa[i] = Sai[i][-1]
                SaT50[i] = np.median(Sa[i])
                bTSa[i] = np.std(np.log(Sa[i]))
            else:
                Rcap = [np.interp(tmlim[i],idacm[j],idacr[j]) for j in range(0,len(idacm))]
                SaT50[i] = np.array(Rcap[1])*Say
                bTSa[i] = 0.5*(np.log(np.array(Rcap[0]))-np.log(np.array(Rcap[2])))
    
    print "median IM = ", SaT50
    print "total dispersion = ", bTSa
    
    return [SaT50,bTSa]
