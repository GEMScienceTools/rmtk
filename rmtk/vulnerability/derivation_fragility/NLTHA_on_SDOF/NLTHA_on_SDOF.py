# -*- coding: utf-8 -*-
import os
import numpy
import math
import matplotlib.pyplot as plt
from rmtk.vulnerability.common import utils

def calculate_fragility(capacity_curves,gmrs,damage_model,damping,degradation):
#This function returns a damage probability matrix (PDM) and the corresponding spectral displacements
    
    no_damage_states = len(damage_model['damage_states'])
    no_gmrs = len(gmrs['time'])
    no_capacity_curves = len(capacity_curves['Sd'])
    PDM = numpy.zeros((no_gmrs,no_damage_states+1))
    Sds = numpy.zeros((no_gmrs,no_capacity_curves))
    for icc in range(no_capacity_curves):
        print str((icc+1)*100/no_capacity_curves) + '%'
        limit_states = utils.define_limit_states(capacity_curves,icc,damage_model)
        print limit_states
        for igmr in range(no_gmrs):
            time, disps = run_time_history_analysis(capacity_curves,icc,gmrs,igmr,damping,degradation)
            Sdi = max(numpy.abs(numpy.array(disps)))
            PDM = utils.allocate_damage(igmr,PDM,Sdi,limit_states)
            Sds[igmr][icc] = Sdi
    return PDM, Sds

def run_time_history_analysis(capacity_curves,icc,gmrs,igmr,damping,degradation):
#This function runs the NLTHA in OpenSees and returns the displacements time history

    write_gmr(gmrs,igmr)
    create_SDOF_paramfile(capacity_curves,icc,damping,degradation)
#    os.system('chmod +x OpenSees')
    os.system('./OpenSees simplestSDOFgen.tcl')
    
    disps = []
    time = []
    disp_file = open('NodeD.out')
    lines = disp_file.readlines()
    for line in lines:
        values = line.strip().split(' ')
        time.append(float(values[0]))
        disps.append(float(values[1]))
        
    return time, disps
    
def write_gmr(gmrs,igmr):
#This function creates a file with the number of points, the time step, and the acceleration values of each GMR
    
    out_file = open('gmr.txt','w')
    out_file.write(str(gmrs['no_points'][igmr])+'\n')
    out_file.write(str(gmrs['dt'][igmr])+'\n')
    for iacc in range(gmrs['no_points'][igmr]):
        out_file.write(str(gmrs['acc'][igmr][iacc])+'\n')
    out_file.close()
    
def create_SDOF_paramfile(capacity_curves,icc,damping,degradation):
#This function creates a file with the parameters of the SDOF that are required for the NLTHA 

    d_flag = 0
    if degradation:
        d_flag = 1
        
    out_file = open('SDOF_paramfile.tcl','w')
    out_file.write('set material "pinchgeneric" \n')
    f1 = capacity_curves['Sa'][icc][1]*9.81
    f2 = capacity_curves['Sa'][icc][2]*9.81
    f3 = capacity_curves['Sa'][icc][3]*9.81
    f4 = capacity_curves['Sa'][icc][4]*9.81
    d1 = capacity_curves['Sd'][icc][1]
    d2 = capacity_curves['Sd'][icc][2]
    d3 = capacity_curves['Sd'][icc][3]
    d4 = capacity_curves['Sd'][icc][4]
    d5 = capacity_curves['Sd'][icc][4]
    #-capacity_curves['Sd'][icc][1]
    out_file.write('set fi {%f %f %f %f 0.0} \n' %(f1,f2,f3,f4)) 
    out_file.write('set di {%f %f %f %f %f} \n' %(d1,d2,d3,d4,d5))
    out_file.write('set ksi %f \n' %damping)
    out_file.write('set Tperiod "0.0" \n')
    out_file.write('set mx "1.0" \n')
    out_file.write('set degflag "%d" \n' %d_flag)
    out_file.write('set analysistype "dynamic"')
    out_file.close()
    
