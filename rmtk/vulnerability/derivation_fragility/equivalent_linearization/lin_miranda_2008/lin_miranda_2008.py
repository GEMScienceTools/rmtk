# -*- coding: utf-8 -*-
import os
import numpy
import math
from scipy import interpolate
from scipy import optimize
import matplotlib.pyplot as plt
from rmtk.vulnerability.common import utils

def calculate_fragility(capacity_curves,gmrs,damage_model):
#This function returns a damage probability matrix (PDM) and the corresponding spectral displacements
    
    no_damage_states = len(damage_model['damage_states'])
    no_gmrs = len(gmrs['time'])
    no_capacity_curves = len(capacity_curves['Sd'])
    PDM = numpy.zeros((no_gmrs,no_damage_states+1))
    Sds = numpy.zeros((no_gmrs,no_capacity_curves))
    for icc in range(no_capacity_curves):
        print str((icc+1)*100/no_capacity_curves) + '%'
        for igmr in range(no_gmrs):
            limit_states = utils.define_limit_states(capacity_curves,icc,damage_model)
            Sdi = calculate_Sd(gmrs,igmr,capacity_curves,icc)
            [PDM, ds] = utils.allocate_damage(igmr,PDM,Sdi,limit_states)
            Sds[igmr][icc] = Sdi
    return PDM, Sds

def calculate_Sd(gmrs,igmr,capacity_curves,icc):
#This function calculates the spectral displacements corresponding to each 
#pair of values of equivalent period and equivalent damping

    Sa = numpy.array(capacity_curves['Sa'][icc])
    Sd = numpy.array(capacity_curves['Sd'][icc])
    Say = capacity_curves['Say'][icc]
    Sdy = capacity_curves['Sdy'][icc]
    elastic_period = capacity_curves['periods'][icc]
    
    Sa_max = max(Sa)
    Sd_Sa_max = max(Sd[numpy.where(Sa==Sa_max)])
    R = max(Sa)/Say
    alpha = (Sa_max-Say)*9.81/(Sd_Sa_max-Sdy)
    m1,m2,n1,n2 = get_parameters(alpha)
    equivalent_period = calculate_equivalent_period(elastic_period,m1,m2,R)
    equivalent_damping = calculate_equivalent_damping(elastic_period,n1,n2,R)
    
    time = gmrs['time'][igmr]
    acc = gmrs['acc'][igmr]
    
    spectrum = utils.NigamJennings(time,acc,[equivalent_period],equivalent_damping)
    Sd = spectrum['Sd']
    
    return Sd
    
def get_parameters(alpha):
#This function returns the coefficients associated to the alpha value

    if alpha <= 0:
        m1 = 0.026
        m2 = 0.870
        n1 = 0.016
        n2 = 0.840
    elif  alpha <= 0.05:
        m1 = 0.027
        m2 = 0.650
        n1 = 0.027
        n2 = 0.550
    elif  alpha <= 0.10:
        m1 = 0.027
        m2 = 0.510
        n1 = 0.031
        n2 = 0.390
    else:
        m1 = 0.024
        m2 = 0.360
        n1 = 0.030
        n2 = 0.240
        
    return m1,m2,n1,n2

def calculate_equivalent_period(T0,m1,m2,R):

    equivalent_period = (1+(m1/(T0**m2))*(R**1.8-1))*T0
    
    return equivalent_period
    
def calculate_equivalent_damping(T0,n1,n2,R):

    initial_damping = 0.05
    equivalent_damping = initial_damping+(n1/(T0**n2))*(R-1)
    
    return equivalent_damping
