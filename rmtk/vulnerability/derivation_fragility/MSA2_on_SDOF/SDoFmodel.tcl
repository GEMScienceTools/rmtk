#-----------------------------------------------------------
# Created 25/Nov/2011, Copyright (c) D. Vamvatsikos
#       Based on my more complex simpleSDOF4.tcl
# Updated 12/Apr/2013, added Elastic and Elastoplastic materials, plus 
#       an absolute acceleration recorder. I have also set runIDAflag=0 in all cases to avoid
#       potential misinterpretations with older output for new users.
# Updated May/2015 for the implementation in the GEM RMTK
#-----------------------------------------------------------
source util/units_constants_metric.tcl
source SDOF_paramfile.tcl
model basic -ndm 1 -ndf 1

#-------------------------------------------------------------------------------
puts "Analysis: $analysistype"

#-------------------------------------------------------------------------------
# Define the material to test.

set i 1
switch [string tolower $material] {
     elastic {
     puts "Elastic Material"
        set ki [expr 0.25/0.005]
        uniaxialMaterial Elastic $i $ki   
     } elastoplastic {
     puts "Elastic-perfectly plastic Material"
        set ki [expr 0.25/0.005]
        uniaxialMaterial ElasticPP $i $ki 1.0 
     } pinchgeneric {
     puts "pinching4 --> Generic quintilinear"
     for {set j 0} {$j<=4} {incr j} {
        eval "set d$j [lindex $di $j]"
        eval "set f$j [lindex $fi $j]"
     }
     #puts "$f0 -$f0"
     set ki [expr $f0/$d0]
     if {$degflag==0} {
       #uniaxialMaterial Pinching4 $matTag $ePf1 $ePd1 $ePf2 $ePd2 $ePf3 $ePd3 
       uniaxialMaterial Pinching4 [expr $i*10] \
                         $f0   $d0   $f1   $d1   $f2   $d2   $f3   $d3\
                        -$f0  -$d0  -$f1  -$d1  -$f2  -$d2  -$f3  -$d3\
                                 0.5 0.25 0.05 \
				 0.5 0.25 0.05 \
                                 0. 0. 0. 0. 0.\
				 0. 0. 0. 0. 0.\
                                 0. 0. 0. 0. 0.\
				 10. "energy" 
     } else {
       uniaxialMaterial Pinching4 [expr $i*10] \
                         $f0   $d0   $f1   $d1   $f2   $d2   $f3   $d3\
                        -$f0  -$d0  -$f1  -$d1  -$f2  -$d2  -$f3  -$d3\
                                 0.5 0.25 0.05 \
				 0.5 0.25 0.05 \
                                 0. 0.1 0. 0. 0.2\
				 0. 0.1 0. 0. 0.2\
                                 0. 0.4 0. 0.4 0.9\
				 10. "energy"
     }
     #uniaxialMaterial MinMax matTag? otherMatTag? -min minStrain? -max maxStrain? 
     uniaxialMaterial MinMax $i [expr $i*10] -min -$d4 -max $d4      
 } default {
   error "The material requested is non-existent. Check MatIDA_paramfile.tcl"
   exit
}
}

set imat_final $i

#-----------------------------------------  
#   if Tperiod <>0 set the mass to achieve the given period.
#   else set the period to match the given mass!
#-----------------------------------------
set kx $ki
if {$Tperiod!=0} {
   set mx [expr pow($Tperiod/(2*$pi),2)*$kx]
} else {
   set Tperiod 	[expr 2*$pi*sqrt($mx/$kx)]
}
#-----------------------------------------
set omega [expr pow($kx/$mx,0.5)]
#puts "initial stiffness K=$kx"
#puts "Mass              M=$mx"
puts "SDOF period       T=$Tperiod sec"
#puts "cyclic frequency  W=$omega rad/sec"
#puts "frequency         f=[expr 1.0/$Tperiod] Hz"

node 1 0 
node 2 0  -mass $mx
element zeroLength 1 1 2 -mat $imat_final -dir 1
fix 1 1 

recorder Node -file NodeD.out -time -node 2 -dof 1 disp
recorder Node -file NodeR.out -time -node 2 -dof 1 reaction

set outfile [open "Periods.out" "w"]
puts $outfile $Tperiod
close $outfile

if {$dampingtype=="massproportional"} {
  # values taken from Chopra
  puts "Mass proportional damping [expr $ksi*100]%"
  set alphaM [expr $ksi*2.0*$omega]
  set betaKinit 0
  set betaKcomm 0
  set betaK 0
} elseif {$dampingtype=="initialstiffness"} {
  puts "Initial stiffness proportional damping [expr $ksi*100]%"
  set alphaM 0
  set betaKcomm 0
  set betaK 0
  set betaKinit [expr $ksi*2.0/$omega]
  } elseif {$dampingtype=="tangentstiffness"} {
    puts "Tangent stiffness proportional damping [expr $ksi*100]%"
    set alphaM 0
    set betaKinit 0
    set betaK 0
	set betaKcomm [expr $ksi*2.0/$omega]
}

# tangent stiffness proportional damping; +beatK*KCurrent
# last commited stiffness RAYLEIGH damping parameter; +betaKcomm*KlastCommitt

rayleigh $alphaM $betaK $betaKinit $betaKcomm

puts "rayleigh $alphaM $betaK $betaKinit $betaKcomm"
