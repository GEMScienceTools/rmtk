# -*- coding: utf-8 -*-
import os
import numpy
import math
import matplotlib.pyplot as plt
from rmtk.vulnerability.common import utils
import csv

def calculate_fragility(capacity_curves,gmrs,damage_model,damping,degradation,number_models_in_DS):
    
    no_damage_states = len(damage_model['damage_states'])
    no_gmrs = len(gmrs['time'])
    no_capacity_curves = len(capacity_curves['Sd'])
    
    # dictionary to allocate damage states for all the capacity curves for all the levels of pre-damage
    PDMs = {}
    Sds = {}
    for iDS in range(no_damage_states):
        PDMs['iDS'+str(iDS)] = numpy.zeros((no_gmrs,no_damage_states+1))
        Sds['iDS'+ str(iDS)] = numpy.zeros((no_gmrs,no_capacity_curves))

    #for icc in range(no_capacity_curves):
    for icc in range(0,1):
        print str((icc+1)*100/no_capacity_curves) + '%'
        limit_states = utils.define_limit_states(capacity_curves,icc,damage_model)
        
        
#------- run first Multiple Stripe Analysis -----------------------------------
        
        # remove file containing results previous analyses if exists
        for iDS in range(0,len(limit_states)):
            try:
                os.remove('initial_DS%d.csv' %iDS)
            except OSError:
                pass
            
        counter = 0
        PDM1 = numpy.zeros((no_gmrs,no_damage_states+1))
        for iDS in range(0,len(limit_states)):
            store_DS = []
            for igmr in range(counter,no_gmrs):
                counter = igmr+1
                time, disps = run_time_history_analysis(capacity_curves,icc,gmrs,igmr,damping,degradation)
                Sdi = max(numpy.abs(numpy.array(disps)))
                PDM1, ds = utils.allocate_damage(igmr,PDM1,Sdi,limit_states)
                store_DS.append([gmrs['name'][igmr], ds])
                
                # if maximum number of models in DS is achieved stop
                if sum(PDM1[:,iDS]) >= number_models_in_DS:
                    break
            
            # Store names of records and corresponding DS achieved so far            
            save_DS_list(iDS,store_DS, limit_states)
            
#------- run second Multiple Stripe Analysis -----------------------------------
        
        for iDS in range(0,len(limit_states)):            
            with open('initial_DS%d.csv' %iDS, 'rU') as f:
                gmr_list = [row for row in csv.reader(f)]
            for gmr_name in gmr_list:
                print gmr_name[0]
                igmr1 = gmrs['name'].index(gmr_name[0])
                PDM = numpy.zeros((no_gmrs,no_damage_states+1))
                for igmr2 in range(no_gmrs):
                    print igmr2
                    time, disps = run_2time_history_analyses(capacity_curves,icc,gmrs,igmr1,igmr2,damping,degradation)
                    Sdi = max(numpy.abs(numpy.array(disps)))
                    print Sdi
                    PDM, ds = utils.allocate_damage(igmr2,PDM,Sdi,limit_states)
                    Sds['iDS' + str(iDS)][igmr2,icc] = Sdi
                PDMs['iDS' + str(iDS)] = PDMs['iDS' + str(iDS)]+PDM
                
    return PDMs, Sds

def save_DS_list(iDS,store_DS,limit_states):
# This function saves in a csv file the names of records leading to each DS

    no_ls = len(limit_states)+1
    for ds in range(iDS,no_ls):
        # open existing file containing names of grms leading to each 
        # DS and continue writing
        out_file = open(os.path.join('initial_DS%d.csv' %ds), 'a')
        for row in store_DS:
            if row[1] == ds:
                out_file.write('%s\n' %row[0])
        out_file.close()            
            
def run_time_history_analysis(capacity_curves,icc,gmrs,igmr,damping,degradation):
    
    file_name = 'gmr.txt'
    write_gmr(file_name,gmrs,igmr)
    
    create_SDOF_paramfile(capacity_curves,icc,damping,degradation,'no')
#    os.system('chmod +x OpenSees')
    os.system('./OpenSees simplestSDOFgen.tcl')
    
    disps = []
    time = []
    disp_file = open('NodeD.out')
    lines = disp_file.readlines()
    for line in lines:
        values = line.strip().split(' ')
        time.append(float(values[0]))
        disps.append(float(values[1]))
    
    return time, disps

def run_2time_history_analyses(capacity_curves,icc,gmrs,igmr1,igmr2,damping,degradation):
    
    file_name = 'gmr.txt'
    write_double_gmr(file_name,gmrs,igmr1,igmr2)
    #file_name = 'gmr2.txt'
    #write_gmr(file_name,gmrs,igmr2)
    
    create_SDOF_paramfile(capacity_curves,icc,damping,degradation,'no')
#    os.system('chmod +x OpenSees')
    os.system('./OpenSees simplestSDOFgen.tcl')
    
    disps = []
    time = []
    disp_file = open('NodeD.out')
    lines = disp_file.readlines()
    for line in lines[gmrs['no_points'][igmr1]:]:
        values = line.strip().split(' ')
        time.append(float(values[0]))
        disps.append(float(values[1]))
        
    print len(disps)
    return time, disps
    
def write_gmr(file_name,gmrs,igmr):
    
    out_file = open(file_name,'w')
    out_file.write(str(gmrs['no_points'][igmr])+'\n')
    out_file.write(str(gmrs['dt'][igmr])+'\n')
    for iacc in range(gmrs['no_points'][igmr]):
        out_file.write(str(gmrs['acc'][igmr][iacc])+'\n')
    out_file.close()
    
def write_double_gmr(file_name,gmrs,igmr1,igmr2):
    
    print gmrs['no_points'][igmr1],gmrs['no_points'][igmr2]
    out_file = open(file_name,'w')
    out_file.write(str(gmrs['no_points'][igmr1]+gmrs['no_points'][igmr2])+'\n')
    out_file.write(str(gmrs['dt'][igmr1])+'\n')
    for iacc in range(gmrs['no_points'][igmr1]):
        out_file.write(str(gmrs['acc'][igmr1][iacc])+'\n')
    for iacc in range(gmrs['no_points'][igmr2]):
        out_file.write(str(gmrs['acc'][igmr2][iacc])+'\n')
    out_file.close()
    
def create_SDOF_paramfile(capacity_curves,icc,damping,degradation,double_gmr):

    d_flag = 0
    if degradation:
        d_flag = 1
        
    out_file = open('SDOF_paramfile.tcl','w')
    out_file.write('set material "pinchgeneric" \n')
    f1 = capacity_curves['Sa'][icc][1]*9.81
    f2 = capacity_curves['Sa'][icc][2]*9.81
    f3 = capacity_curves['Sa'][icc][3]*9.81
    f4 = capacity_curves['Sa'][icc][4]*9.81
    d1 = capacity_curves['Sd'][icc][1]
    d2 = capacity_curves['Sd'][icc][2]
    d3 = capacity_curves['Sd'][icc][3]
    d4 = capacity_curves['Sd'][icc][4]
    d5 = capacity_curves['Sd'][icc][4]
    #-capacity_curves['Sd'][icc][1]
    out_file.write('set fi {%f %f %f %f 0.0} \n' %(f1,f2,f3,f4)) 
    out_file.write('set di {%f %f %f %f %f} \n' %(d1,d2,d3,d4,d5))
    out_file.write('set ksi %f \n' %damping)
    out_file.write('set Tperiod "0.0" \n')
    out_file.write('set mx "1.0" \n')
    out_file.write('set degflag "%d" \n' %d_flag)
    out_file.write('set analysistype "dynamic" \n')
    out_file.write('set double_gmr "%s"' %double_gmr)
    out_file.close()
    
