
# coding: utf-8

# # Ruiz-García and Miranda (2007)
# 
# The aim of this procedure is the estimation of the median spectral acceleration value that brings the structure to the attainment of a set of damage states, and the corresponding dispersion. This aim is achieved through the methodology described in [Ruiz-García and Miranda (2007)](http://onlinelibrary.wiley.com/doi/10.1002/eqe.680/abstract), where the inelastic displacement demand of bilinear SDOF systems is related to the elastic displacement by means of the inelastic displacement ratio $C_R$ (the ratio of inelastic displacement to elastic spectral displacement). Estimates of the parameter $C_R$ are provided by Ruiz-García and Miranda in terms of median and dispersion, based on a nonlinear regression analysis of 240 ground motions. The figure below illustrates the relationship of the parameter $C_R$ with the period $T$ of the structure and $R$.
# 
# <img src="../../../../../figures/RGM_Cr.jpg" width="400" align="middle">
# 
# **Note**: To run the code in a cell:
# 
# 1. Click on the cell to select it.
# 2. Press `SHIFT+ENTER` on your keyboard or press the play button (<button class='fa fa-play icon-play btn btn-xs btn-default'></button>) in the toolbar above.

# In[1]:

from rmtk.vulnerability.derivation_fragility.R_mu_T_dispersion.ruiz_garcia_miranda import RGM2007 
from rmtk.vulnerability.common import utils
import scipy.stats as stat
get_ipython().magic(u'matplotlib inline')


# ---
# ###Load capacity curves
# 
# In order to use this methodology, it is necessary to provide one (or a group) of capacity curves, defined according to the format described in the [RMTK manual](../../../../../rmtk-docs.pdf). In case multiple capacity curves are input, a spectral shape also needs to be defined.
# 
# 1. Please provide the location of the file containing the capacity curves using the parameter `capacity_curves_file`.
# 2. Please also provide a spectral shape using the parameter `input_spectrum` if multiple capacity curves are used.

# In[2]:

capacity_curves_file = "../../../../../../rmtk_data/capacity_curves_Vb-dfloor.csv"
input_spectrum = "../../../../../../rmtk_data/FEMAP965spectrum.txt"


# In[4]:

capacity_curves = utils.read_capacity_curves(capacity_curves_file)
utils.plot_capacity_curves(capacity_curves)
Sa_ratios = utils.get_spectral_ratios(capacity_curves, input_spectrum)


# ###Idealise pushover curves
# 
# In order to use this methodology the pushover curves need to be idealised. Please choose an idealised shape using the parameter `idealised_type`. Currently, the only valid option for this methodology "bilinear". Idealised curves can also be directly provided as input by setting the field `Idealised` to `TRUE` in the input file defining the capacity curves.

# In[4]:

idealised_type = "bilinear"


# In[5]:

idealised_capacity = utils.idealisation(idealised_type, capacity_curves)
utils.plot_idealised_capacity(idealised_capacity, capacity_curves, idealised_type)


# ###Load damage state thresholds
# 
# Please provide the path to your damage model file using the parameter `damage_model_file` in the cell below.

# In[6]:

damage_model_file = "../../../../../../rmtk_data/damage_model_ISD.csv"


# In[7]:

damage_model = utils.read_damage_model(damage_model_file)


# ###Calculate fragility functions
# 
# The damage threshold dispersion is calculated and integrated with the record-to-record dispersion through Monte Carlo simulations. Please enter the number of Monte Carlo samples to be performed using the parameter `montecarlo_samples` in the cell below.

# In[8]:

montecarlo_samples = 50


# In[9]:

fragility_model = RGM2007.calculate_fragility(capacity_curves, idealised_capacity, damage_model, montecarlo_samples, Sa_ratios)


# ### Plot fragility functions
# 
# The following parameters need to be defined in the cell below in order to plot the lognormal CDF fragility curves obtained above:
# * `minIML` and `maxIML`: These parameters define the limits of the intensity measure level for plotting the functions

# In[10]:

minIML, maxIML = 0.01, 2.00


# In[11]:

utils.plot_fragility_model(fragility_model, minIML, maxIML)


# ### Save fragility functions
# 
# The derived parametric fragility functions can be saved to a file in either CSV format or in the NRML format that is used by all OpenQuake input models. The following parameters need to be defined in the cell below in order to save the lognormal CDF fragility curves obtained above:
# 1. `taxonomy`: This parameter specifies a taxonomy string for the the fragility functions.
# 2. `minIML` and `maxIML`: These parameters define the bounds of applicability of the functions.
# 3. `output_type`: This parameter specifies the file format to be used for saving the functions. Currently, the formats supported are "csv" and "nrml".

# In[12]:

taxonomy = "RC"
minIML, maxIML = 0.01, 2.00
output_type = "csv"


# In[13]:

utils.save_mean_fragility(taxonomy, fragility_model, minIML, maxIML, output_type)


# ### Obtain vulnerability function
# 
# A vulnerability model can be derived by combining the set of fragility functions obtained above with a consequence model. In this process, the fractions of buildings in each damage state are multiplied by the associated damage ratio from the consequence model, in order to obtain a distribution of loss ratio for each intensity measure level. 
# 
# The following parameters need to be defined in the cell below in order to calculate vulnerability functions using the above derived fragility functions:
# 1. `cons_model_file`: This parameter specifies the path of the consequence model file.
# 2. `imls`: This parameter specifies a list of intensity measure levels in increasing order at which the distribution of loss ratios are required to be calculated.
# 3. `distribution_type`: This parameter specifies the type of distribution to be used for calculating the vulnerability function. The distribution types currently supported are "lognormal", "beta", and "PMF".

# In[16]:

cons_model_file = "../../../../../../rmtk_data/cons_model.csv"
imls = [0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 
        0.60, 0.70, 0.80, 0.90, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00]
distribution_type = "lognormal"


# In[17]:

cons_model = utils.read_consequence_model(cons_model_file)
vulnerability_model = utils.convert_fragility_vulnerability(fragility_model, cons_model, 
                                                            imls, distribution_type)


# ### Plot vulnerability function
# 
# 

# In[18]:

utils.plot_vulnerability_model(vulnerability_model)


# ### Save vulnerability function
# 
# The derived parametric or nonparametric vulnerability function can be saved to a file in either CSV format or in the NRML format that is used by all OpenQuake input models. The following parameters need to be defined in the cell below in order to save the lognormal CDF fragility curves obtained above:
# 1. `taxonomy`: This parameter specifies a taxonomy string for the the fragility functions.
# 3. `output_type`: This parameter specifies the file format to be used for saving the functions. Currently, the formats supported are "csv" and "nrml".

# In[19]:

taxonomy = "RC"
output_type = "nrml"


# In[ ]:

utils.save_vulnerability(taxonomy, vulnerability_model, output_type)

